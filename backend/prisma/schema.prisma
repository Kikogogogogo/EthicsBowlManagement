generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                       String             @id @default(uuid())
  email                    String             @unique
  firstName                String             @map("first_name")
  lastName                 String             @map("last_name")
  role                     String
  avatarUrl                String?            @map("avatar_url")
  googleId                 String             @unique @map("google_id")
  isEmailVerified          Boolean            @default(true) @map("is_email_verified")
  isActive                 Boolean            @default(false) @map("is_active")
  lastLoginAt              DateTime?          @map("last_login_at")
  createdAt                DateTime           @default(now()) @map("created_at")
  updatedAt                DateTime           @updatedAt @map("updated_at")
  createdEvents            Event[]
  judgeAssignments         MatchAssignment[]
  moderatedMatches         Match[]            @relation("ModeratorMatches")
  createdPreApprovedEmails PreApprovedEmail[]
  scores                   Score[]

  @@map("users")
}

model Event {
  id              String    @id @default(uuid())
  name            String
  description     String?
  totalRounds     Int       @default(3) @map("total_rounds")
  currentRound    Int       @default(1) @map("current_round")
  status          String    @default("draft")
  eventDate       DateTime? @map("event_date")
  startDate       DateTime? @map("start_date")
  endDate         DateTime? @map("end_date")
  location        String?
  maxTeams        Int?      @map("max_teams")
  scoringCriteria String?   @map("scoring_criteria")
  createdBy       String    @map("created_by")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  creator         User      @relation(fields: [createdBy], references: [id])
  matches         Match[]
  teams           Team[]

  @@map("events")
}

model Team {
  id           String   @id @default(uuid())
  name         String
  school       String?
  coachName    String?  @map("coach_name")
  coachEmail   String?  @map("coach_email")
  eventId      String   @map("event_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  wonMatches   Match[]  @relation("WinnerMatches")
  teamBMatches Match[]  @relation("TeamBMatches")
  teamAMatches Match[]  @relation("TeamAMatches")
  scores       Score[]
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("teams")
}

model Match {
  id            String            @id @default(uuid())
  eventId       String            @map("event_id")
  roundNumber   Int               @map("round_number")
  teamAId       String?           @map("team_a_id")
  teamBId       String?           @map("team_b_id")
  moderatorId   String?           @map("moderator_id")
  room          String?
  scheduledTime DateTime?         @map("scheduled_time")
  status        String            @default("scheduled")
  currentStep   String            @default("intro") @map("current_step")
  winnerId      String?           @map("winner_id")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  assignments   MatchAssignment[]
  winner        Team?             @relation("WinnerMatches", fields: [winnerId], references: [id])
  moderator     User?             @relation("ModeratorMatches", fields: [moderatorId], references: [id])
  teamB         Team?             @relation("TeamBMatches", fields: [teamBId], references: [id])
  teamA         Team?             @relation("TeamAMatches", fields: [teamAId], references: [id])
  event         Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  scores        Score[]

  @@map("matches")
}

model MatchAssignment {
  id        String   @id @default(uuid())
  matchId   String   @map("match_id")
  judgeId   String   @map("judge_id")
  createdAt DateTime @default(now()) @map("created_at")
  judge     User     @relation(fields: [judgeId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, judgeId])
  @@map("match_assignments")
}

model Score {
  id                String    @id @default(uuid())
  matchId           String    @map("match_id")
  judgeId           String    @map("judge_id")
  teamId            String    @map("team_id")
  criteriaScores    String?   // Store individual criteria scores as JSON string
  commentScores     String?   @map("comment_scores") // Store three comment scores as JSON string
  notes             String?
  isSubmitted       Boolean   @default(false) @map("is_submitted")
  submittedAt       DateTime? @map("submitted_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  team              Team      @relation(fields: [teamId], references: [id])
  judge             User      @relation(fields: [judgeId], references: [id])
  match             Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId, judgeId, teamId])
  @@map("scores")
}

model PreApprovedEmail {
  id        String   @id @default(uuid())
  email     String   @unique
  role      String   @default("judge")
  notes     String?
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  creator   User     @relation(fields: [createdBy], references: [id])

  @@map("pre_approved_emails")
}
